/*! \page linkage Linking applications

<h2>Compiling and linking a C/C++ application against ESIO</h2>

To compile and link a C or C++ application against your ESIO installation, the
installation's \c include directory and \c lib directory must be added to your
C/C++ compiler's include and library search paths, respectively.  You will need
to supply flags to link against ESIO <i>and</i> HDF5's basic and high-level
libraries.  Note that you will either need to use your MPI implementation's
C/C++ compiler wrapper script, denoted here by <tt>\$(MPICC)</tt>, or you will
additionally need to provide MPI-related flags within the sample commands
below.

This tutorial assumes you installed HDF5 under $HDF5HOME and also that at ESIO
configuration time you specified <tt>--prefix=$HOME</tt> to install ESIO under
your home directory (It may be necessary to include your home directory
under in \code LD_LIBRARY_PATH \endcode). In this case, compiling and linking 
an MPI application consisting of a
single source file named <tt>app.c</tt> might look as follows:

\code > $(MPICC) -I$HOME/include app.c -L$HOME/lib -lesio -L$HDF5HOME -lhdf5_hl -lhdf5 -lz -lm \endcode

This is error prone as you must supply the same HDF5 installation directories
used at ESIO configuration time.  Continuing the example, if you set your
<tt>PKG_CONFIG_PATH</tt> environment variable to contain
<tt>$HOME/lib/pkgconfig</tt> you can use <a
href="http://pkg-config.freedesktop.org/wiki/"><tt>pkg-config</tt></a> to
lookup the relevant linking information automatically:

\code > $(MPICC) `pkg-config --cflags esio-hdf5` app.c `pkg-config --libs esio-hdf5` \endcode

Finally, if you are using HDF5's parallel compiler wrapper script <tt>h5pcc</tt>
the above two examples no longer need to include many HDF5-related specifics:

\code > h5pcc -I$HOME/include app.c -L$HOME/lib -lesio \endcode

\code > h5pcc `pkg-config --cflags esio` app.c `pkg-config --libs esio` \endcode

Using pkg-config will avoid many easy-to-make mistakes.  It is highly
recommended you use pkg-config with ESIO where possible.

<h2>Compiling and linking a Fortran application against ESIO</h2>

To compile and link a Fortran 90 application against your ESIO installation,
the installation's \c lib directory must be added to both your Fortran
compiler's include and library search paths.  In particular, if you do not
provide \c lib within the search path you will see error messages stating that
<tt>esio.mod</tt> is missing.  You will need to supply flags to link against
ESIO's Fortran library (<tt>esiof</tt>) <i>and</i> HDF5's basic and high-level
C libraries (<tt>hdf5</tt> and <tt>hdf5_hl</tt>).  The HDF5 Fortran libraries
(<tt>hdf5_fortran</tt> and <tt>hdf5hl_fortran</tt>) are <tt>not</tt> required.
You do not need to have built HDF5 with Fortran support enabled.

Note that you will either need to use your MPI implementation's Fortran
compiler wrapper script, denoted here by <tt>\$(MPIFC)</tt>, or you will
additionally need to provide MPI-related flags within the sample commands
below.

Assuming the same installation detailed in the C/C++ examples just above, you
would compile and link a Fortran MPI application consisting of a single source
file named <tt>app.F90</tt> as follows:

\code > $(MPIFC) -I$HOME/lib app.F90 -L$HOME/lib -lesiof -L$HDF5HOME -lhdf5_hl -lhdf5 -lz -lm \endcode

Using pkg-config simplifies the process considerably:

\code > $(MPIFC) `pkg-config --variable=fflags esio-hdf5` app.F90 `pkg-config --variable=flibs esio-hdf5` \endcode

Again, if you are using HDF5's parallel compiler wrapper script <tt>h5pfc</tt>
the above two examples become simpler:

\code > h5pfc -I$HOME/lib app.F90 -L$HOME/lib -lesiof \endcode

\code > h5pfc `pkg-config --variable=fflags esio` app.F90 `pkg-config --variable=flibs esio` \endcode

<b>Important Note:</b> F90 module file formats are not consistent across
multiple compilers. Therefore, a Fortran application and the ESIO F90 interface
\em must be built with the same Fortran compiler family to ensure
compatibility.

<h2>Obtaining ESIO configuration information from pkg-config</h2>

ESIO's pkg-config files capture many configuration-time settings so that they
can be retrieved easily.  For example, the MPI and HDF5 compiler wrapper
scripts used to build an ESIO installation can be retrieved as follows:

\code
> pkg-config --variable=mpicc        esio-hdf5
> pkg-config --variable=hdf5_version esio-hdf5
> pkg-config --variable=h5pcc        esio-hdf5
\endcode

These values could be used, for example, in a standalone Makefile.  Provided
that your PKG_CONFIG_PATH is configured correctly, such a Makefile can
automatically determine the information necessary to build an ESIO-based
application.

<h2>Using ESIO with GNU Autoconf/Automake</h2>

Because an ESIO installation provides pkg-config information, using ESIO with
<a href="http://www.gnu.org/software/autoconf/">Autoconf</a> and <a
href="http://www.gnu.org/software/automake/">Automake</a> in a C/C++ project is
straightforward.  The exact details are beyond the scope of this documentation,
but the process consists of the following steps:

<ol>
 <li>Use <a href="http://www.gnu.org/software/autoconf-archive/ax_mpi.html">
     <tt>AX_MPI</tt></a> within your <tt>configure.ac</tt> to determine
     where your system's MPI compiler wrappers are located.</li>
 <li>Ensure that automake is using the MPI compiler wrapper by including
     a statement like <tt>CC=@@MPICC@@</tt> within your Makefile.am.</li>
 <li>Use the PKG_CHECK_MODULES autoconf macro to look for ESIO's
     <tt>esio-hdf5</tt> pkg-config information at configure time.
     Load the information into variables like <tt>ESIO_CFLAGS</tt>
     and <tt>ESIO_LIBS</tt>.</li>
 <li>Add <tt>ESIO_CFLAGS</tt> and <tt>ESIO_LIBS</tt> to the appropriate
     targets within your Makefile.am.</li>
</ol>

One very good, but not ESIO-specific, write up on using GNU Autoconf/Automake
with pkg-config is <a
href="http://www.openismus.com/documents/linux/using_libraries/using_libraries">
Using C/C++ libraries with Automake and Autoconf</a>.

*/
